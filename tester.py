import numpy as np
import matplotlib.pyplot as plt

from solarcalc.spectopt import Light, Spectrum, BandCost, SimpleCost

l  = Light("./data/spectra/growtainer-actual.csv", interpolation='linear')
#print(l.spline())
print(l.wavelengths)

dom = np.linspace(400, 750, 1000)


want = Spectrum(dom, np.ones_like(dom)*20 + np.sin(dom))
opt = l.optimise_settings(want)

want_val = np.array([ 285.20045468, 288.14764531, 289.95853486, 290.87841236, 291.15692912, 291.04756919, 290.80719046, 290.69563897, 290.97543868, 291.91155843, 293.77125788, 296.72425327, 300.68289416, 305.4494565, 310.82430551, 316.60594018, 322.59103678, 328.57449126, 334.34946069, 339.70740359, 344.43811943, 348.35835239, 351.44245217, 353.69062027, 355.10315264, 355.68044577, 355.4230027, 354.33143913, 352.40648965, 349.64901388, 346.06000277, 341.70276731, 336.90204205, 332.04651608, 327.52764592, 323.73959419, 321.07916977, 319.94576927, 320.74132002, 323.87022435, 329.73930518, 338.6082827, 350.14214301, 363.85326591, 379.2506701, 395.84008129, 413.12399952, 430.60176587, 447.76962855, 464.12080846, 479.14556427, 492.44641278, 504.08500169, 514.23901206, 523.08731532, 530.8099471, 537.58808206, 543.6040096, 549.04111052, 554.08383468, 558.91767943, 563.67038709, 568.24230403, 572.47476641, 576.20830593, 579.2826661, 581.53681818, 582.8089767, 582.93661469, 581.75647852, 579.10460246, 574.90949776, 569.50205545, 563.30970106, 556.76191233, 550.29017306, 544.32793861, 539.31061322, 535.67553926, 533.86199827, 534.31122411, 537.31359023, 542.65107264, 549.95674191, 558.86193538, 568.99628983, 579.98777359, 591.46271793, 603.0458477, 614.36031143, 625.02771076, 634.6657219, 643.33144469, 651.1052937, 658.06829317, 664.30201129, 669.8885018, 674.91025292, 679.45014374, 683.59140807, 687.41760578, 690.99108624, 694.28828907, 697.26404204, 699.87304258, 702.06985953, 703.80893537, 705.04458885, 705.73101821, 705.82230482, 705.27241732, 704.0708878, 702.350028, 700.27825747, 698.02447785, 695.75806309, 693.6488426, 691.86707727, 690.58342845, 689.96891974, 690.1948916, 691.36369622, 693.30062076, 695.76116859, 698.5003006, 701.27249436, 703.83180061, 705.93189705, 707.32613928, 707.76760917, 707.00916029, 704.88706615, 701.57208884, 697.31897362, 692.38284532, 687.01915978, 681.48365587, 676.03230801, 670.92127914, 666.40687431, 662.74549465, 660.13160444, 658.51175384, 657.7703689, 657.79173601, 658.46001888, 659.65927712, 661.27348647, 663.1865606, 665.28237454, 667.44478973, 669.56352112, 671.55199365, 673.32959187, 674.81580859, 675.93023227, 676.59252246, 676.72237316, 676.23946418, 675.06340045, 673.11363928, 670.35554001, 666.93990403, 663.06380473, 658.92455425, 654.71977871, 650.64743199, 646.90574802, 643.69313135, 641.20798621, 639.64848387, 639.15039031, 639.60518774, 640.84237633, 642.69145394, 644.98214077, 647.54455096, 650.20931124, 652.80762692, 655.17129531, 657.13266692, 658.56150324, 659.49039355, 659.9894263, 660.12844203, 659.9770682, 659.60475219, 659.08079245, 658.4743677, 657.85456435, 657.29040208, 656.82517036, 656.45484071, 656.15257698, 655.89156545, 655.64500951, 655.38613178, 655.08818377, 654.72446287, 654.2683369, 653.69327632, 652.94324297, 652.04971889, 651.02526488, 649.88243494, 648.63375795, 647.29172126, 645.86875644, 644.37722707, 642.82941849, 641.23752968, 639.61366703, 637.96984021, 636.31795987, 634.66983737, 633.03718637, 631.43162631, 629.86468777, 628.34781961, 626.89239803, 625.50973735, 624.03564309, 622.61998421, 621.26239094, 619.96221932, 618.71851021, 617.52997733, 616.39501669, 615.31173044, 614.27795931, 613.29131947, 612.34924077, 611.44900435, 610.58777875, 609.762654, 608.97067381, 608.20886614, 607.47427299, 606.76398003, 606.07514736, 605.40504239, 604.75107682, 604.11084947, 603.48219792, 602.858491, 602.24654825, 601.64936312, 601.0700301, 600.51168637, 599.97745737, 599.47040353, 598.99346617, 598.54941085, 598.14076701, 597.76976383, 597.43826286, 597.14769011, 596.89897223, 596.69248441, 596.52802144, 596.40480642, 596.10821593, 595.86367408, 595.66086351, 595.48946285, 595.33913856, 595.19953817, 595.06028487, 594.91097352, 594.74116799, 594.54039998, 594.29816914, 594.00394469, 593.64716842, 593.21725917, 592.70361868, 592.09563899, 591.38271125, 590.55423595, 589.59963477, 588.5083637, 587.10305163, 585.56040961, 583.89909821, 582.13770731, 580.29473353, 578.38856719, 576.43748729, 574.45966367, 572.47316522, 570.49597331, 568.5459999, 566.64110985, 564.79914744, 563.03796705, 561.37546855, 559.829638, 558.41859475, 557.16064651, 556.07435433, 555.17861066, 554.49273425, 554.03658795, 553.83072732, 553.89659235, 554.25676032, 554.93528764, 555.45278827, 556.19215563, 557.10449121, 558.14070776, 559.25151048, 560.38738221, 561.49857236, 562.53508992, 563.44670023, 564.18292588, 564.69305149, 564.4004339, 562.89793319, 561.01677389, 558.85070695, 556.47170004, 553.93595176, 551.28905051, 548.56975661, 545.81258828, 543.04954736, 540.31128215, 537.62790803, 535.02964188, 532.54736483, 530.21321031, 528.06128166, 526.12864396, 524.45683581, 523.09438011, 522.10134169, 521.55852686, 521.58885135, 522.41825378, 522.55534574, 522.21764955, 522.12791652, 522.26012225, 522.58884997, 523.08914168, 523.73637748, 524.50617263, 525.37428246, 526.31650492, 527.30856628, 528.32596886, 529.34376581, 530.3362041, 531.27613649, 532.13403721, 532.87636195, 533.46289554, 533.84275531, 533.34470858, 526.47186355, 521.24624521, 516.67775162, 512.57013295, 508.8945626, 505.67919323, 502.97706284, 500.85437779, 498.65896971, 497.06136137, 496.04790805, 495.59627261, 495.71235894, 496.49626661, 496.94826602, 496.68143045, 496.34225012, 495.95071191, 495.53008157, 495.10639955, 494.70821747, 494.36653718, 494.11496374, 493.99014532, 494.03268148, 494.28890801, 494.81450696, 495.68232117, 497.00102884, 498.96606252, 492.8402687, 487.18097987, 482.73581281, 479.16065337, 476.33578562, 474.22077541, 472.82184152, 472.19015077, 472.44082638])
want_val /= 400
dom = np.linspace(400, 700, len(want_val))
want = Spectrum(dom, want_val)


bands = [(400, 500), (500, 600), (600, 700)]
cf = BandCost(bands= bands, weights=[1, 0.0, 1])
opt2 = l.optimise_settings(want, cost_function=cf)

par_cf = BandCost(bands=[(400, 700)])
par_op = l.optimise_settings(want, cost_function=par_cf)


full = l.light_output([1,1,1], dom)
o1 = l.light_output(opt, dom)
o2 = l.light_output(opt2, dom)
op = l.light_output(par_op, dom)
l1 = plt.plot(dom, want.values, label='want')
l2 = plt.plot(dom, o1.values+0.01, label='simple')
l3 = plt.plot(dom, o2.values, label='banded')
l3 = plt.plot(dom, op.values, label='par')
l2 = plt.plot(dom, full.values, label='full')
plt.legend()
plt.show()
